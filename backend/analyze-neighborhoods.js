const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
  user: process.env.DB_USER || 'postgres',
  host: process.env.DB_HOST || 'localhost',
  database: process.env.DB_NAME || 'water_monitoring',
  password: process.env.DB_PASSWORD || 'admin',
  port: process.env.DB_PORT || 5432,
});

// Lista dos 65 bairros oficiais de Jo√£o Monlevade
const officialNeighborhoods = [
  'Alvorada', 'Areal', 'Barreiro', 'Boa Vista', 'Bom Jesus', 'Bonfim',
  'Caet√©s', 'Camargos', 'Centro', 'Cidade Nova', 'Cruzeiro do Sul',
  'Esplanada', 'F√°tima', 'Funcion√°rios', 'Granjas', 'Hava√≠',
  'Industrial', 'Jardim dos Ip√™s', 'Jo√£o Paulo II', 'Jos√© Moreira dos Santos',
  'Lajinha', 'Liberdade', 'Loanda', 'Mangabeiras', 'Marajoara',
  'Melo Viana', 'Minas Caixa', 'Monlevade', 'Monte Castelo', 'Montese',
  'Novo Horizonte', 'Olaria', 'Palmital', 'Parque das √Åguas', 'Parque S√£o Lu√≠s',
  'Pedreira', 'Planalto', 'Ponte do Cosme', 'Progresso', 'Ros√°rio',
  'Santa B√°rbara', 'Santa Efig√™nia', 'Santa Helena', 'Santa M√¥nica',
  'Santa Rita', 'Santa Terezinha', 'Santo Ant√¥nio', 'S√£o Crist√≥v√£o',
  'S√£o Francisco', 'S√£o Jo√£o', 'S√£o Jos√©', 'S√£o Judas Tadeu',
  'S√£o Pedro', 'S√£o Sebasti√£o', 'S√£o Vicente', 'Tanque', 'Tijuco',
  'Tom√©', 'Tri√¢ngulo', 'Universit√°rio', 'Vale do A√ßo', 'Vale Verde',
  'Vila Bretas', 'Vila Tanque', 'Vit√≥ria'
];

async function analyzeNeighborhoods() {
  const client = await pool.connect();
  
  try {
    console.log('üîç AN√ÅLISE DETALHADA DOS BAIRROS');
    console.log('=' .repeat(50));
    
    // 1. Estat√≠sticas gerais
    const totalResult = await client.query('SELECT COUNT(*) as total FROM status');
    const statusResult = await client.query(
      'SELECT status, COUNT(*) as count FROM status GROUP BY status ORDER BY count DESC'
    );
    
    console.log(`üìä Total de registros no banco: ${totalResult.rows[0].total}`);
    console.log(`üìã Total de bairros oficiais: ${officialNeighborhoods.length}`);
    
    console.log('\nüìà Distribui√ß√£o por status:');
    statusResult.rows.forEach(row => {
      console.log(`   ${row.status}: ${row.count} bairros`);
    });
    
    // 2. Verificar bairros existentes
    const existingResult = await client.query('SELECT bairro FROM status ORDER BY bairro');
    const existingNeighborhoods = existingResult.rows.map(row => row.bairro);
    
    // 3. Compara√ß√£o com lista oficial
    const missingFromDB = officialNeighborhoods.filter(n => !existingNeighborhoods.includes(n));
    const extraInDB = existingNeighborhoods.filter(n => !officialNeighborhoods.includes(n));
    
    if (missingFromDB.length > 0) {
      console.log('\n‚ùå Bairros oficiais FALTANDO no banco:');
      missingFromDB.forEach(n => console.log(`   - ${n}`));
    } else {
      console.log('\n‚úÖ Todos os bairros oficiais est√£o no banco');
    }
    
    if (extraInDB.length > 0) {
      console.log('\n‚ö†Ô∏è  Bairros EXTRAS no banco (n√£o oficiais):');
      extraInDB.forEach(n => console.log(`   - ${n}`));
    } else {
      console.log('\n‚úÖ Nenhum bairro extra encontrado');
    }
    
    // 4. Verificar duplicatas
    const duplicatesResult = await client.query(
      'SELECT bairro, COUNT(*) as count FROM status GROUP BY bairro HAVING COUNT(*) > 1'
    );
    
    if (duplicatesResult.rows.length > 0) {
      console.log('\nüîÑ Bairros DUPLICADOS encontrados:');
      duplicatesResult.rows.forEach(row => {
        console.log(`   - ${row.bairro}: ${row.count} registros`);
      });
    } else {
      console.log('\n‚úÖ Nenhuma duplicata encontrada');
    }
    
    // 5. Listar todos os bairros do banco
    console.log('\nüìã Todos os bairros no banco:');
    existingNeighborhoods.forEach((neighborhood, index) => {
      const isOfficial = officialNeighborhoods.includes(neighborhood);
      const marker = isOfficial ? '‚úÖ' : '‚ö†Ô∏è ';
      console.log(`   ${(index + 1).toString().padStart(2, '0')}. ${marker} ${neighborhood}`);
    });
    
    console.log('\n' + '=' .repeat(50));
    console.log('üìä RESUMO:');
    console.log(`   ‚Ä¢ Bairros no banco: ${existingNeighborhoods.length}`);
    console.log(`   ‚Ä¢ Bairros oficiais: ${officialNeighborhoods.length}`);
    console.log(`   ‚Ä¢ Faltando: ${missingFromDB.length}`);
    console.log(`   ‚Ä¢ Extras: ${extraInDB.length}`);
    console.log(`   ‚Ä¢ Duplicatas: ${duplicatesResult.rows.length}`);
    
  } catch (error) {
    console.error('‚ùå Erro na an√°lise:', error);
  } finally {
    client.release();
    await pool.end();
  }
}

analyzeNeighborhoods();
