const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
  user: process.env.DB_USER || 'postgres',
  host: process.env.DB_HOST || 'localhost',
  database: process.env.DB_NAME || 'water_monitoring',
  password: process.env.DB_PASSWORD || 'admin',
  port: process.env.DB_PORT || 5432,
});

// Lista dos 65 bairros oficiais de Jo√£o Monlevade
const officialNeighborhoods = [
  'Alvorada', 'Areal', 'Barreiro', 'Boa Vista', 'Bom Jesus', 'Bonfim',
  'Caet√©s', 'Camargos', 'Centro', 'Cidade Nova', 'Cruzeiro do Sul',
  'Esplanada', 'F√°tima', 'Funcion√°rios', 'Granjas', 'Hava√≠',
  'Industrial', 'Jardim dos Ip√™s', 'Jo√£o Paulo II', 'Jos√© Moreira dos Santos',
  'Lajinha', 'Liberdade', 'Loanda', 'Mangabeiras', 'Marajoara',
  'Melo Viana', 'Minas Caixa', 'Monlevade', 'Monte Castelo', 'Montese',
  'Novo Horizonte', 'Olaria', 'Palmital', 'Parque das √Åguas', 'Parque S√£o Lu√≠s',
  'Pedreira', 'Planalto', 'Ponte do Cosme', 'Progresso', 'Ros√°rio',
  'Santa B√°rbara', 'Santa Efig√™nia', 'Santa Helena', 'Santa M√¥nica',
  'Santa Rita', 'Santa Terezinha', 'Santo Ant√¥nio', 'S√£o Crist√≥v√£o',
  'S√£o Francisco', 'S√£o Jo√£o', 'S√£o Jos√©', 'S√£o Judas Tadeu',
  'S√£o Pedro', 'S√£o Sebasti√£o', 'S√£o Vicente', 'Tanque', 'Tijuco',
  'Tom√©', 'Tri√¢ngulo', 'Universit√°rio', 'Vale do A√ßo', 'Vale Verde',
  'Vila Bretas', 'Vila Tanque', 'Vit√≥ria'
];

async function checkNeighborhoods() {
  const client = await pool.connect();
  
  try {
    console.log('üîß Iniciando corre√ß√£o dos bairros...');
    
    // 1. Verificar bairros existentes
    const existingResult = await client.query('SELECT bairro FROM status ORDER BY bairro');
    const existingNeighborhoods = existingResult.rows.map(row => row.bairro);
    
    console.log(`üìä Bairros existentes no banco: ${existingNeighborhoods.length}`);
    console.log(`üìã Bairros oficiais esperados: ${officialNeighborhoods.length}`);
    
    // 2. Encontrar bairros que est√£o no banco mas n√£o s√£o oficiais
    const extraNeighborhoods = existingNeighborhoods.filter(n => !officialNeighborhoods.includes(n));
    if (extraNeighborhoods.length > 0) {
      console.log('\n‚ö†Ô∏è  Bairros extras no banco (n√£o oficiais):');
      extraNeighborhoods.forEach(n => console.log(`   - ${n}`));
    }
    
    // 3. Encontrar bairros oficiais que n√£o est√£o no banco
    const missingNeighborhoods = officialNeighborhoods.filter(n => !existingNeighborhoods.includes(n));
    if (missingNeighborhoods.length > 0) {
      console.log('\n‚ùå Bairros oficiais faltando no banco:');
      missingNeighborhoods.forEach(n => console.log(`   - ${n}`));
      console.log('\n‚ö†Ô∏è  ATEN√á√ÉO: Estes bairros devem ser adicionados manualmente por um operador/administrador.');
      console.log('   Use o sistema de administra√ß√£o para adicionar os bairros faltantes.');
    }
    
    // 4. Verificar total final
    const finalResult = await client.query('SELECT COUNT(*) as total FROM status');
    const finalTotal = parseInt(finalResult.rows[0].total);
    
    console.log(`\nüìà Total de bairros no banco: ${finalTotal}`);
    
    if (finalTotal === 65) {
      console.log('‚úÖ Perfeito! Todos os 65 bairros oficiais est√£o no banco.');
    } else {
      console.log(`‚ö†Ô∏è  Aten√ß√£o: Esperado 65 bairros, encontrado ${finalTotal}`);
      console.log('   Para corrigir, adicione os bairros faltantes atrav√©s do sistema de administra√ß√£o.');
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao corrigir bairros:', error);
  } finally {
    client.release();
    await pool.end();
  }
}

checkNeighborhoods();
